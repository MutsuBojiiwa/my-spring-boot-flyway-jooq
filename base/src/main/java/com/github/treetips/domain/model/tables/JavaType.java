/**
 * This class is generated by jOOQ
 */
package com.github.treetips.domain.model.tables;


import com.github.treetips.domain.model.Test;
import com.github.treetips.domain.model.enums.JavaTypeEnumType;
import com.github.treetips.domain.model.tables.records.JavaTypeRecord;

import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;


/**
 * java型確認マスタ
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JavaType extends TableImpl<JavaTypeRecord> {

	private static final long serialVersionUID = 213962602;

	/**
	 * The reference instance of <code>test.java_type</code>
	 */
	public static final JavaType JAVA_TYPE = new JavaType();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<JavaTypeRecord> getRecordType() {
		return JavaTypeRecord.class;
	}

	/**
	 * The column <code>test.java_type.char_type</code>.
	 */
	public final TableField<JavaTypeRecord, String> CHAR_TYPE = createField("char_type", org.jooq.impl.SQLDataType.CHAR.length(10).defaulted(true), this, "");

	/**
	 * The column <code>test.java_type.varchar_type</code>.
	 */
	public final TableField<JavaTypeRecord, String> VARCHAR_TYPE = createField("varchar_type", org.jooq.impl.SQLDataType.VARCHAR.length(10).defaulted(true), this, "");

	/**
	 * The column <code>test.java_type.tinytext_type</code>.
	 */
	public final TableField<JavaTypeRecord, String> TINYTEXT_TYPE = createField("tinytext_type", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>test.java_type.text_type</code>.
	 */
	public final TableField<JavaTypeRecord, String> TEXT_TYPE = createField("text_type", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>test.java_type.mediumtext_type</code>.
	 */
	public final TableField<JavaTypeRecord, String> MEDIUMTEXT_TYPE = createField("mediumtext_type", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>test.java_type.longtext_type</code>.
	 */
	public final TableField<JavaTypeRecord, String> LONGTEXT_TYPE = createField("longtext_type", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>test.java_type.tinyint_type</code>.
	 */
	public final TableField<JavaTypeRecord, Byte> TINYINT_TYPE = createField("tinyint_type", org.jooq.impl.SQLDataType.TINYINT.defaulted(true), this, "");

	/**
	 * The column <code>test.java_type.smallint_type</code>.
	 */
	public final TableField<JavaTypeRecord, Short> SMALLINT_TYPE = createField("smallint_type", org.jooq.impl.SQLDataType.SMALLINT.defaulted(true), this, "");

	/**
	 * The column <code>test.java_type.mediumint_type</code>.
	 */
	public final TableField<JavaTypeRecord, Integer> MEDIUMINT_TYPE = createField("mediumint_type", org.jooq.impl.SQLDataType.INTEGER.defaulted(true), this, "");

	/**
	 * The column <code>test.java_type.int_type</code>.
	 */
	public final TableField<JavaTypeRecord, Integer> INT_TYPE = createField("int_type", org.jooq.impl.SQLDataType.INTEGER.defaulted(true), this, "");

	/**
	 * The column <code>test.java_type.bigint_type</code>.
	 */
	public final TableField<JavaTypeRecord, Long> BIGINT_TYPE = createField("bigint_type", org.jooq.impl.SQLDataType.BIGINT.defaulted(true), this, "");

	/**
	 * The column <code>test.java_type.float_type</code>.
	 */
	public final TableField<JavaTypeRecord, Double> FLOAT_TYPE = createField("float_type", org.jooq.impl.SQLDataType.FLOAT.defaulted(true), this, "");

	/**
	 * The column <code>test.java_type.double_type</code>.
	 */
	public final TableField<JavaTypeRecord, Double> DOUBLE_TYPE = createField("double_type", org.jooq.impl.SQLDataType.DOUBLE.defaulted(true), this, "");

	/**
	 * The column <code>test.java_type.date_type</code>.
	 */
	public final TableField<JavaTypeRecord, Date> DATE_TYPE = createField("date_type", org.jooq.impl.SQLDataType.DATE.defaulted(true), this, "");

	/**
	 * The column <code>test.java_type.datetime_type</code>.
	 */
	public final TableField<JavaTypeRecord, Timestamp> DATETIME_TYPE = createField("datetime_type", org.jooq.impl.SQLDataType.TIMESTAMP.defaulted(true), this, "");

	/**
	 * The column <code>test.java_type.timestamp_type</code>.
	 */
	public final TableField<JavaTypeRecord, Timestamp> TIMESTAMP_TYPE = createField("timestamp_type", org.jooq.impl.SQLDataType.TIMESTAMP.defaulted(true), this, "");

	/**
	 * The column <code>test.java_type.time_stype</code>.
	 */
	public final TableField<JavaTypeRecord, Time> TIME_STYPE = createField("time_stype", org.jooq.impl.SQLDataType.TIME.defaulted(true), this, "");

	/**
	 * The column <code>test.java_type.year_type</code>.
	 */
	public final TableField<JavaTypeRecord, Date> YEAR_TYPE = createField("year_type", org.jooq.impl.SQLDataType.DATE.defaulted(true), this, "");

	/**
	 * The column <code>test.java_type.binary_type</code>.
	 */
	public final TableField<JavaTypeRecord, byte[]> BINARY_TYPE = createField("binary_type", org.jooq.impl.SQLDataType.BINARY.length(1), this, "");

	/**
	 * The column <code>test.java_type.varbinary_type</code>.
	 */
	public final TableField<JavaTypeRecord, byte[]> VARBINARY_TYPE = createField("varbinary_type", org.jooq.impl.SQLDataType.VARBINARY.length(10), this, "");

	/**
	 * The column <code>test.java_type.tinyblob_type</code>.
	 */
	public final TableField<JavaTypeRecord, byte[]> TINYBLOB_TYPE = createField("tinyblob_type", org.jooq.impl.SQLDataType.BLOB, this, "");

	/**
	 * The column <code>test.java_type.blob_type</code>.
	 */
	public final TableField<JavaTypeRecord, byte[]> BLOB_TYPE = createField("blob_type", org.jooq.impl.SQLDataType.BLOB, this, "");

	/**
	 * The column <code>test.java_type.mediumblob_type</code>.
	 */
	public final TableField<JavaTypeRecord, byte[]> MEDIUMBLOB_TYPE = createField("mediumblob_type", org.jooq.impl.SQLDataType.BLOB, this, "");

	/**
	 * The column <code>test.java_type.longblog_type</code>.
	 */
	public final TableField<JavaTypeRecord, byte[]> LONGBLOG_TYPE = createField("longblog_type", org.jooq.impl.SQLDataType.BLOB, this, "");

	/**
	 * The column <code>test.java_type.enum_type</code>.
	 */
	public final TableField<JavaTypeRecord, JavaTypeEnumType> ENUM_TYPE = createField("enum_type", org.jooq.util.mysql.MySQLDataType.VARCHAR.asEnumDataType(com.github.treetips.domain.model.enums.JavaTypeEnumType.class), this, "");

	/**
	 * The column <code>test.java_type.set_type</code>.
	 */
	public final TableField<JavaTypeRecord, String> SET_TYPE = createField("set_type", org.jooq.impl.SQLDataType.VARCHAR.length(17).defaulted(true), this, "");

	/**
	 * The column <code>test.java_type.geometry_type</code>.
	 */
	public final TableField<JavaTypeRecord, Object> GEOMETRY_TYPE = createField("geometry_type", org.jooq.impl.DefaultDataType.getDefaultDataType("geometry"), this, "");

	/**
	 * The column <code>test.java_type.point_type</code>.
	 */
	public final TableField<JavaTypeRecord, Object> POINT_TYPE = createField("point_type", org.jooq.impl.DefaultDataType.getDefaultDataType("point"), this, "");

	/**
	 * The column <code>test.java_type.linestring_type</code>.
	 */
	public final TableField<JavaTypeRecord, Object> LINESTRING_TYPE = createField("linestring_type", org.jooq.impl.DefaultDataType.getDefaultDataType("linestring"), this, "");

	/**
	 * The column <code>test.java_type.polygon_type</code>.
	 */
	public final TableField<JavaTypeRecord, Object> POLYGON_TYPE = createField("polygon_type", org.jooq.impl.DefaultDataType.getDefaultDataType("polygon"), this, "");

	/**
	 * The column <code>test.java_type.multipoint_type</code>.
	 */
	public final TableField<JavaTypeRecord, Object> MULTIPOINT_TYPE = createField("multipoint_type", org.jooq.impl.DefaultDataType.getDefaultDataType("multipoint"), this, "");

	/**
	 * The column <code>test.java_type.multilinestring_type</code>.
	 */
	public final TableField<JavaTypeRecord, Object> MULTILINESTRING_TYPE = createField("multilinestring_type", org.jooq.impl.DefaultDataType.getDefaultDataType("multilinestring"), this, "");

	/**
	 * The column <code>test.java_type.multipolygon_type</code>.
	 */
	public final TableField<JavaTypeRecord, Object> MULTIPOLYGON_TYPE = createField("multipolygon_type", org.jooq.impl.DefaultDataType.getDefaultDataType("multipolygon"), this, "");

	/**
	 * The column <code>test.java_type.geometrycollection_type</code>.
	 */
	public final TableField<JavaTypeRecord, Object> GEOMETRYCOLLECTION_TYPE = createField("geometrycollection_type", org.jooq.impl.DefaultDataType.getDefaultDataType("geometrycollection"), this, "");

	/**
	 * Create a <code>test.java_type</code> table reference
	 */
	public JavaType() {
		this("java_type", null);
	}

	/**
	 * Create an aliased <code>test.java_type</code> table reference
	 */
	public JavaType(String alias) {
		this(alias, JAVA_TYPE);
	}

	private JavaType(String alias, Table<JavaTypeRecord> aliased) {
		this(alias, aliased, null);
	}

	private JavaType(String alias, Table<JavaTypeRecord> aliased, Field<?>[] parameters) {
		super(alias, Test.TEST, aliased, parameters, "java型確認マスタ");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public JavaType as(String alias) {
		return new JavaType(alias, this);
	}

	/**
	 * Rename this table
	 */
	public JavaType rename(String name) {
		return new JavaType(name, null);
	}
}
